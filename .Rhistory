memb
t(memb)
# Chunk 1: set-options
options(width = 200)
# Chunk 2
library("downloader")
folder<-".\\data\\ga_edgelist.csv"
if(!file.exists(folder)){
# Download a csv file from the Internet:
fileURL <- "http://www.babelgraph.org/data/ga_edgelist.csv"
download.file(fileURL, destfile = folder)
# Always record the date
dateDownloaded <- date()
dateDownloaded
}
library(igraph)
# Read from local drive
ga.data <- read.csv(folder,header=T)
g <- graph.data.frame(ga.data,directed=FALSE)
V(g)$name
# Chunk 3
E(g)
# Chunk 4
summary(g)
# Chunk 5
btw <- betweenness(g)
# rescale values to match the elements of a color vector
btw.score <- round( (btw - min(btw)) * length(btw) / max(btw) ) + 1
# create color vector, use rev to make red "hot"
btw.colors <- rev(heat.colors(max(btw.score)))
V(g)$color <- btw.colors[ btw.score ]
g$layout <- layout.fruchterman.reingold(g)
plot(g)
which.max(btw)
# Chunk 6
clo <- closeness(g)
# rescale values to match the elements of a color vector
clo.score <- round( (clo - min(clo)) * length(clo) / max(clo) ) + 1
# create color vector, use rev to make red "hot"
clo.colors <- rev(heat.colors(max(clo.score)))
V(g)$color <- clo.colors[ clo.score ]
plot(g)
which.max(clo)
# Chunk 7
temp <- eigen_centrality(g)
evc<-temp$vector
# rescale values to match the elements of a color vector
evc.score <- round( (evc - min(evc)) * length(evc) / max(evc) ) + 1
# create color vector, use rev to make red "hot"
evc.colors <- rev(heat.colors(max(evc.score)))
V(g)$color <- evc.colors[ evc.score ]
plot(g)
which.max(evc)
# Chunk 8
# Remove self-loops is exist
greyAnatomy <- simplify(g)
# Set seed (for layout) - so it won't be randomal
set.seed(200)
# Chunk 9
# Community strucure via short random walks
fc <- walktrap.community(greyAnatomy)
memb<-membership(fc)
lay <- layout.fruchterman.reingold(greyAnatomy)
plot(greyAnatomy, layout=lay, vertex.size=5, vertex.label=NA, vertex.color=memb+1, asp=FALSE)
# Chunk 10
max(memb)
memb
t(memb)
barplot(as.numeric(memb), main="Car Distribution",
xlab="Number of Gears")
memb
memb<-t(memb)
barplot(as.numeric(memb), main="Car Distribution",
xlab="Number of Gears")
# Chunk 1: set-options
options(width = 200)
# Chunk 2
library("downloader")
folder<-".\\data\\ga_edgelist.csv"
if(!file.exists(folder)){
# Download a csv file from the Internet:
fileURL <- "http://www.babelgraph.org/data/ga_edgelist.csv"
download.file(fileURL, destfile = folder)
# Always record the date
dateDownloaded <- date()
dateDownloaded
}
library(igraph)
# Read from local drive
ga.data <- read.csv(folder,header=T)
g <- graph.data.frame(ga.data,directed=FALSE)
V(g)$name
# Chunk 3
E(g)
# Chunk 4
summary(g)
# Chunk 5
btw <- betweenness(g)
# rescale values to match the elements of a color vector
btw.score <- round( (btw - min(btw)) * length(btw) / max(btw) ) + 1
# create color vector, use rev to make red "hot"
btw.colors <- rev(heat.colors(max(btw.score)))
V(g)$color <- btw.colors[ btw.score ]
g$layout <- layout.fruchterman.reingold(g)
plot(g)
which.max(btw)
# Chunk 6
clo <- closeness(g)
# rescale values to match the elements of a color vector
clo.score <- round( (clo - min(clo)) * length(clo) / max(clo) ) + 1
# create color vector, use rev to make red "hot"
clo.colors <- rev(heat.colors(max(clo.score)))
V(g)$color <- clo.colors[ clo.score ]
plot(g)
which.max(clo)
# Chunk 7
temp <- eigen_centrality(g)
evc<-temp$vector
# rescale values to match the elements of a color vector
evc.score <- round( (evc - min(evc)) * length(evc) / max(evc) ) + 1
# create color vector, use rev to make red "hot"
evc.colors <- rev(heat.colors(max(evc.score)))
V(g)$color <- evc.colors[ evc.score ]
plot(g)
which.max(evc)
# Chunk 8
# Remove self-loops is exist
greyAnatomy <- simplify(g)
# Set seed (for layout) - so it won't be randomal
set.seed(200)
# Chunk 9
# Community strucure via short random walks
fc <- walktrap.community(greyAnatomy)
memb<-membership(fc)
lay <- layout.fruchterman.reingold(greyAnatomy)
plot(greyAnatomy, layout=lay, vertex.size=5, vertex.label=NA, vertex.color=memb+1, asp=FALSE)
# Chunk 10
max(memb)
memb
a <- table(memb)
a
barplot(as.numeric(memb), main="Car Distribution",
xlab="Number of Gears")
memb
a <- table(memb)
a
barplot(a, main="Car Distribution",
xlab="Number of Gears")
memb
a <- table(memb)
# rescale values to match the elements of a color vector
a.score <- round( (a - min(a)) * length(a) / max(a) ) + 1
# create color vector, use rev to make red "hot"
a.colors <- rev(heat.colors(max(a.score)))
barplot(a, col =a.colors, main="Car Distribution",
xlab="Number of Gears")
memb
a <- table(memb)
# rescale values to match the elements of a color vector
a.score <- round( (a - min(a)) * length(a) / max(a) ) + 1
# create color vector, use rev to make red "hot"
a.colors <- rev(heat.colors(max(a.score)))
barplot(a, col =vertex.color=memb+1, main="Car Distribution",
xlab="Number of Gears")
memb
a <- table(memb)
temp<- vertex.color=memb+1
barplot(a, col= temp, main="Car Distribution",
xlab="Number of Gears")
memb
a <- table(memb)
temp<- vertex.color=memb+1
barplot(a, col=memb+1 , main="Car Distribution",
xlab="Number of Gears")
memb
membTable <- table(memb)
barplot(membTable, col= , main="Bar plot for Number of Members\nVS\nCommunity",
xlab="#Community", ylab = "Number of Members")
barplot(membTable, col=membTable+1 , main="Bar plot for Number of Members\nVS\nCommunity",
memb
membTable <- table(memb)
barplot(membTable, col=membTable+1 , main="Bar plot for Number of Members\nVS\nCommunity",
xlab="#Community", ylab = "Number of Members")
memb
membTable <- table(memb)
barplot(membTable, col=c(1:max(memb)) , main="Bar plot for Number of Members\nVS\nCommunity",
xlab="#Community", ylab = "Number of Members")
barplot(membTable, col=c(2:max(memb)+1) , main="Bar plot for Number of Members\nVS\nCommunity",
memb
membTable <- table(memb)
barplot(membTable, col=c(2:max(memb)+1) , main="Bar plot for Number of Members\nVS\nCommunity",
xlab="#Community", ylab = "Number of Members")
memb
vertex.color=memb+1
membTable <- table(memb)
barplot(membTable, col=vertex.color , main="Bar plot for Number of Members\nVS\nCommunity",
xlab="#Community", ylab = "Number of Members")
memb
vertex.color=memb+1
colo <- table(vertex.color)
membTable <- table(memb)
barplot(membTable, col=colo , main="Bar plot for Number of Members\nVS\nCommunity",
xlab="#Community", ylab = "Number of Members")
# Community strucure via short random walks
fc <- walktrap.community(greyAnatomy)
memb<-membership(fc)
lay <- layout.fruchterman.reingold(greyAnatomy)
plot(greyAnatomy, layout=lay, vertex.size=5, vertex.label=NA, vertex.color=terrain.colors(24), asp=FALSE)
# Community strucure via short random walks
fc <- walktrap.community(greyAnatomy)
memb<-membership(fc)
lay <- layout.fruchterman.reingold(greyAnatomy)
plot(greyAnatomy, layout=lay, vertex.size=5, vertex.label=NA, vertex.color=memb+1, asp=FALSE)
memb
membTable <- table(memb)
barplot(membTable, col=terrain.colors(24) , main="Bar plot for Number of Members\nVS\nCommunity",
xlab="#Community", ylab = "Number of Members")
memb
membTable <- table(memb)
barplot(membTable, col=terrain.colors(7) , main="Bar plot for Number of Members\nVS\nCommunity",
xlab="#Community", ylab = "Number of Members")
# Community strucure via short random walks
fc <- walktrap.community(greyAnatomy)
memb<-membership(fc)
lay <- layout.fruchterman.reingold(greyAnatomy)
plot(greyAnatomy, layout=lay, vertex.size=5, vertex.label=NA, vertex.color=terrain.colors(memb+1), asp=FALSE)
memb
membTable <- table(memb)
barplot(membTable, col=terrain.colors(7) , main="Bar plot for Number of Members\nVS\nCommunity",
xlab="#Community", ylab = "Number of Members")
